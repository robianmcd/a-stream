(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{77:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return u}));var r=a(3),n=a(7),i=(a(0),a(91)),s={sidebar_position:1},o={unversionedId:"api-reference/a-stream",id:"api-reference/a-stream",isDocsHomePage:!1,title:"AStream",description:"AStream represents the source node in a stream of asynchronous event handlers. It can receive input data, preform initial handling of the data and attach downstream BaseStreamNodes for further handling.",source:"@site/docs/api-reference/a-stream.md",sourceDirName:"api-reference",slug:"/api-reference/a-stream",permalink:"/a-stream/docs/api-reference/a-stream",editUrl:"https://github.com/robianmcd/a-stream/edit/master/docs-site/docs/api-reference/a-stream.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Global State Management",permalink:"/a-stream/docs/guides/global-state-management"}},c=[{value:"Constructor",id:"constructor",children:[{value:"Parameters",id:"parameters",children:[]}]}],l={toc:c};function u(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"AStream")," represents the source node in a stream of asynchronous event handlers. It can receive input data, preform initial handling of the data and attach downstream ",Object(i.b)("inlineCode",{parentName:"p"},"BaseStreamNodes")," for further handling."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Sample Usage"',title:'"Sample','Usage"':!0},"import {AStream} from 'a-stream';\n\nconst stream = new AStream((x: number, y: number) => x * y);\nawait stream(6, 7); // returns 42\n")),Object(i.b)("h2",{id:"constructor"},"Constructor"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Constructor Signature"',title:'"Constructor','Signature"':!0},"    constructor (\n        inputHandler?: (...args: Params) => Promise<TResult> | TResult,\n        options?: {initialValue: TResult},\n    ) : AStream<Params, TResult>\n")),Object(i.b)("h3",{id:"parameters"},"Parameters"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"inputHandler?: (...args: Params) => Promise<TResult> | TResult"))," - Initial handler function for the stream. Can return the resulting value of the node or a promise that resolves with the result. If this function throws an error or returns a promise that gets rejected then the result will be passed to the next node as an error event. Defaults to identity function ",Object(i.b)("inlineCode",{parentName:"p"},"x => x"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"options?: {initialValue: TResult}"))," - Defaults to ",Object(i.b)("inlineCode",{parentName:"p"},"{initialValue: undefined}"),"."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"initialValue")," - Initial value for this node.")))}u.isMDXComponent=!0}}]);